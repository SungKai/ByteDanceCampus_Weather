//
//  ForecastHourlyBean.m
//
//  Created by cnatom on 2022/08/12.
//  Copyright © 2022年 ssr. All rights reserved.
//
//  Code generated by jsonToOCModel https://json.im/
//

#import "ForecastHourlyBean.h"

NSString *const kForecastHourlyBeanForecastHourly = @"forecastHourly";
NSString *const kForecastHourlyBeanForecastHourlyHours = @"hours";
NSString *const kForecastHourlyBeanForecastHourlyHoursCloudCover = @"cloudCover";
NSString *const kForecastHourlyBeanForecastHourlyHoursConditionCode = @"conditionCode";
NSString *const kForecastHourlyBeanForecastHourlyHoursDaylight = @"daylight";
NSString *const kForecastHourlyBeanForecastHourlyHoursForecastStart = @"forecastStart";
NSString *const kForecastHourlyBeanForecastHourlyHoursHumidity = @"humidity";
NSString *const kForecastHourlyBeanForecastHourlyHoursPrecipitationAmount = @"precipitationAmount";
NSString *const kForecastHourlyBeanForecastHourlyHoursPrecipitationChance = @"precipitationChance";
NSString *const kForecastHourlyBeanForecastHourlyHoursPrecipitationIntensity = @"precipitationIntensity";
NSString *const kForecastHourlyBeanForecastHourlyHoursPrecipitationType = @"precipitationType";
NSString *const kForecastHourlyBeanForecastHourlyHoursPressure = @"pressure";
NSString *const kForecastHourlyBeanForecastHourlyHoursPressureTrend = @"pressureTrend";
NSString *const kForecastHourlyBeanForecastHourlyHoursSnowfallIntensity = @"snowfallIntensity";
NSString *const kForecastHourlyBeanForecastHourlyHoursTemperature = @"temperature";
NSString *const kForecastHourlyBeanForecastHourlyHoursTemperatureApparent = @"temperatureApparent";
NSString *const kForecastHourlyBeanForecastHourlyHoursTemperatureDewPoint = @"temperatureDewPoint";
NSString *const kForecastHourlyBeanForecastHourlyHoursUvIndex = @"uvIndex";
NSString *const kForecastHourlyBeanForecastHourlyHoursVisibility = @"visibility";
NSString *const kForecastHourlyBeanForecastHourlyHoursWindDirection = @"windDirection";
NSString *const kForecastHourlyBeanForecastHourlyHoursWindGust = @"windGust";
NSString *const kForecastHourlyBeanForecastHourlyHoursWindSpeed = @"windSpeed";

@interface ForecastHourlyBeanForecastHourlyHours ()

- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict;

@end



@implementation ForecastHourlyBeanForecastHourlyHours

+ (instancetype)modelObjectWithDictionary:(NSDictionary *)dict{
    return [[self alloc] initWithDictionary:dict];
}

- (instancetype)initWithDictionary:(NSDictionary *)dict{
    self = [super init];
    if(self && [dict isKindOfClass:[NSDictionary class]]) {
        self.cloudCover = [[self objectOrNilForKey:kForecastHourlyBeanForecastHourlyHoursCloudCover fromDictionary:dict] doubleValue];
        self.conditionCode = [self objectOrNilForKey:kForecastHourlyBeanForecastHourlyHoursConditionCode fromDictionary:dict];
        self.daylight = [[self objectOrNilForKey:kForecastHourlyBeanForecastHourlyHoursDaylight fromDictionary:dict] boolValue];
        self.forecastStart = [self objectOrNilForKey:kForecastHourlyBeanForecastHourlyHoursForecastStart fromDictionary:dict];
        self.humidity = [[self objectOrNilForKey:kForecastHourlyBeanForecastHourlyHoursHumidity fromDictionary:dict] doubleValue];
        self.precipitationAmount = [[self objectOrNilForKey:kForecastHourlyBeanForecastHourlyHoursPrecipitationAmount fromDictionary:dict] doubleValue];
        self.precipitationChance = [[self objectOrNilForKey:kForecastHourlyBeanForecastHourlyHoursPrecipitationChance fromDictionary:dict] doubleValue];
        self.precipitationIntensity = [[self objectOrNilForKey:kForecastHourlyBeanForecastHourlyHoursPrecipitationIntensity fromDictionary:dict] doubleValue];
        self.precipitationType = [self objectOrNilForKey:kForecastHourlyBeanForecastHourlyHoursPrecipitationType fromDictionary:dict];
        self.pressure = [[self objectOrNilForKey:kForecastHourlyBeanForecastHourlyHoursPressure fromDictionary:dict] doubleValue];
        self.pressureTrend = [self objectOrNilForKey:kForecastHourlyBeanForecastHourlyHoursPressureTrend fromDictionary:dict];
        self.snowfallIntensity = [[self objectOrNilForKey:kForecastHourlyBeanForecastHourlyHoursSnowfallIntensity fromDictionary:dict] doubleValue];
        self.temperature = [[self objectOrNilForKey:kForecastHourlyBeanForecastHourlyHoursTemperature fromDictionary:dict] doubleValue];
        self.temperatureApparent = [[self objectOrNilForKey:kForecastHourlyBeanForecastHourlyHoursTemperatureApparent fromDictionary:dict] doubleValue];
        self.temperatureDewPoint = [[self objectOrNilForKey:kForecastHourlyBeanForecastHourlyHoursTemperatureDewPoint fromDictionary:dict] doubleValue];
        self.uvIndex = [[self objectOrNilForKey:kForecastHourlyBeanForecastHourlyHoursUvIndex fromDictionary:dict] doubleValue];
        self.visibility = [[self objectOrNilForKey:kForecastHourlyBeanForecastHourlyHoursVisibility fromDictionary:dict] doubleValue];
        self.windDirection = [[self objectOrNilForKey:kForecastHourlyBeanForecastHourlyHoursWindDirection fromDictionary:dict] doubleValue];
        self.windGust = [[self objectOrNilForKey:kForecastHourlyBeanForecastHourlyHoursWindGust fromDictionary:dict] doubleValue];
        self.windSpeed = [[self objectOrNilForKey:kForecastHourlyBeanForecastHourlyHoursWindSpeed fromDictionary:dict] doubleValue];
    }
    return self;
}

- (NSDictionary *)dictionaryRepresentation{
    NSMutableDictionary *mutableDict = [NSMutableDictionary dictionary];
    [mutableDict setValue:[NSNumber numberWithDouble:self.cloudCover] forKey:kForecastHourlyBeanForecastHourlyHoursCloudCover];
    [mutableDict setValue:self.conditionCode forKey:kForecastHourlyBeanForecastHourlyHoursConditionCode];
    [mutableDict setValue:[NSNumber numberWithBool:self.daylight] forKey:kForecastHourlyBeanForecastHourlyHoursDaylight];
    [mutableDict setValue:self.forecastStart forKey:kForecastHourlyBeanForecastHourlyHoursForecastStart];
    [mutableDict setValue:[NSNumber numberWithDouble:self.humidity] forKey:kForecastHourlyBeanForecastHourlyHoursHumidity];
    [mutableDict setValue:[NSNumber numberWithDouble:self.precipitationAmount] forKey:kForecastHourlyBeanForecastHourlyHoursPrecipitationAmount];
    [mutableDict setValue:[NSNumber numberWithDouble:self.precipitationChance] forKey:kForecastHourlyBeanForecastHourlyHoursPrecipitationChance];
    [mutableDict setValue:[NSNumber numberWithDouble:self.precipitationIntensity] forKey:kForecastHourlyBeanForecastHourlyHoursPrecipitationIntensity];
    [mutableDict setValue:self.precipitationType forKey:kForecastHourlyBeanForecastHourlyHoursPrecipitationType];
    [mutableDict setValue:[NSNumber numberWithDouble:self.pressure] forKey:kForecastHourlyBeanForecastHourlyHoursPressure];
    [mutableDict setValue:self.pressureTrend forKey:kForecastHourlyBeanForecastHourlyHoursPressureTrend];
    [mutableDict setValue:[NSNumber numberWithDouble:self.snowfallIntensity] forKey:kForecastHourlyBeanForecastHourlyHoursSnowfallIntensity];
    [mutableDict setValue:[NSNumber numberWithDouble:self.temperature] forKey:kForecastHourlyBeanForecastHourlyHoursTemperature];
    [mutableDict setValue:[NSNumber numberWithDouble:self.temperatureApparent] forKey:kForecastHourlyBeanForecastHourlyHoursTemperatureApparent];
    [mutableDict setValue:[NSNumber numberWithDouble:self.temperatureDewPoint] forKey:kForecastHourlyBeanForecastHourlyHoursTemperatureDewPoint];
    [mutableDict setValue:[NSNumber numberWithDouble:self.uvIndex] forKey:kForecastHourlyBeanForecastHourlyHoursUvIndex];
    [mutableDict setValue:[NSNumber numberWithDouble:self.visibility] forKey:kForecastHourlyBeanForecastHourlyHoursVisibility];
    [mutableDict setValue:[NSNumber numberWithDouble:self.windDirection] forKey:kForecastHourlyBeanForecastHourlyHoursWindDirection];
    [mutableDict setValue:[NSNumber numberWithDouble:self.windGust] forKey:kForecastHourlyBeanForecastHourlyHoursWindGust];
    [mutableDict setValue:[NSNumber numberWithDouble:self.windSpeed] forKey:kForecastHourlyBeanForecastHourlyHoursWindSpeed];
    return [NSDictionary dictionaryWithDictionary:mutableDict];
}

- (NSString *)description{
    return [NSString stringWithFormat:@"%@", [self dictionaryRepresentation]];
}

#pragma mark - Helper Method

- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict{
    id object = [dict objectForKey:aKey];
    return [object isEqual:[NSNull null]] ? nil : object;
}


#pragma mark - NSCoding Methods

- (id)initWithCoder:(NSCoder *)aDecoder{
    self = [super init];
    self.cloudCover = [aDecoder decodeDoubleForKey:kForecastHourlyBeanForecastHourlyHoursCloudCover];
    self.conditionCode = [aDecoder decodeObjectForKey:kForecastHourlyBeanForecastHourlyHoursConditionCode];
    self.daylight = [aDecoder decodeBoolForKey:kForecastHourlyBeanForecastHourlyHoursDaylight];
    self.forecastStart = [aDecoder decodeObjectForKey:kForecastHourlyBeanForecastHourlyHoursForecastStart];
    self.humidity = [aDecoder decodeDoubleForKey:kForecastHourlyBeanForecastHourlyHoursHumidity];
    self.precipitationAmount = [aDecoder decodeDoubleForKey:kForecastHourlyBeanForecastHourlyHoursPrecipitationAmount];
    self.precipitationChance = [aDecoder decodeDoubleForKey:kForecastHourlyBeanForecastHourlyHoursPrecipitationChance];
    self.precipitationIntensity = [aDecoder decodeDoubleForKey:kForecastHourlyBeanForecastHourlyHoursPrecipitationIntensity];
    self.precipitationType = [aDecoder decodeObjectForKey:kForecastHourlyBeanForecastHourlyHoursPrecipitationType];
    self.pressure = [aDecoder decodeDoubleForKey:kForecastHourlyBeanForecastHourlyHoursPressure];
    self.pressureTrend = [aDecoder decodeObjectForKey:kForecastHourlyBeanForecastHourlyHoursPressureTrend];
    self.snowfallIntensity = [aDecoder decodeDoubleForKey:kForecastHourlyBeanForecastHourlyHoursSnowfallIntensity];
    self.temperature = [aDecoder decodeDoubleForKey:kForecastHourlyBeanForecastHourlyHoursTemperature];
    self.temperatureApparent = [aDecoder decodeDoubleForKey:kForecastHourlyBeanForecastHourlyHoursTemperatureApparent];
    self.temperatureDewPoint = [aDecoder decodeDoubleForKey:kForecastHourlyBeanForecastHourlyHoursTemperatureDewPoint];
    self.uvIndex = [aDecoder decodeDoubleForKey:kForecastHourlyBeanForecastHourlyHoursUvIndex];
    self.visibility = [aDecoder decodeDoubleForKey:kForecastHourlyBeanForecastHourlyHoursVisibility];
    self.windDirection = [aDecoder decodeDoubleForKey:kForecastHourlyBeanForecastHourlyHoursWindDirection];
    self.windGust = [aDecoder decodeDoubleForKey:kForecastHourlyBeanForecastHourlyHoursWindGust];
    self.windSpeed = [aDecoder decodeDoubleForKey:kForecastHourlyBeanForecastHourlyHoursWindSpeed];
    return self;
}

- (void)encodeWithCoder:(NSCoder *)aCoder{
    [aCoder encodeDouble:_cloudCover forKey:kForecastHourlyBeanForecastHourlyHoursCloudCover];
    [aCoder encodeObject:_conditionCode forKey:kForecastHourlyBeanForecastHourlyHoursConditionCode];
    [aCoder encodeBool:_daylight forKey:kForecastHourlyBeanForecastHourlyHoursDaylight];
    [aCoder encodeObject:_forecastStart forKey:kForecastHourlyBeanForecastHourlyHoursForecastStart];
    [aCoder encodeDouble:_humidity forKey:kForecastHourlyBeanForecastHourlyHoursHumidity];
    [aCoder encodeDouble:_precipitationAmount forKey:kForecastHourlyBeanForecastHourlyHoursPrecipitationAmount];
    [aCoder encodeDouble:_precipitationChance forKey:kForecastHourlyBeanForecastHourlyHoursPrecipitationChance];
    [aCoder encodeDouble:_precipitationIntensity forKey:kForecastHourlyBeanForecastHourlyHoursPrecipitationIntensity];
    [aCoder encodeObject:_precipitationType forKey:kForecastHourlyBeanForecastHourlyHoursPrecipitationType];
    [aCoder encodeDouble:_pressure forKey:kForecastHourlyBeanForecastHourlyHoursPressure];
    [aCoder encodeObject:_pressureTrend forKey:kForecastHourlyBeanForecastHourlyHoursPressureTrend];
    [aCoder encodeDouble:_snowfallIntensity forKey:kForecastHourlyBeanForecastHourlyHoursSnowfallIntensity];
    [aCoder encodeDouble:_temperature forKey:kForecastHourlyBeanForecastHourlyHoursTemperature];
    [aCoder encodeDouble:_temperatureApparent forKey:kForecastHourlyBeanForecastHourlyHoursTemperatureApparent];
    [aCoder encodeDouble:_temperatureDewPoint forKey:kForecastHourlyBeanForecastHourlyHoursTemperatureDewPoint];
    [aCoder encodeDouble:_uvIndex forKey:kForecastHourlyBeanForecastHourlyHoursUvIndex];
    [aCoder encodeDouble:_visibility forKey:kForecastHourlyBeanForecastHourlyHoursVisibility];
    [aCoder encodeDouble:_windDirection forKey:kForecastHourlyBeanForecastHourlyHoursWindDirection];
    [aCoder encodeDouble:_windGust forKey:kForecastHourlyBeanForecastHourlyHoursWindGust];
    [aCoder encodeDouble:_windSpeed forKey:kForecastHourlyBeanForecastHourlyHoursWindSpeed];
}

- (id)copyWithZone:(NSZone *)zone{
    ForecastHourlyBeanForecastHourlyHours *copy = [[ForecastHourlyBeanForecastHourlyHours alloc] init];
    if (copy) {
        copy.cloudCover = self.cloudCover;
        copy.conditionCode = [self.conditionCode copyWithZone:zone];
        copy.daylight = self.daylight;
        copy.forecastStart = [self.forecastStart copyWithZone:zone];
        copy.humidity = self.humidity;
        copy.precipitationAmount = self.precipitationAmount;
        copy.precipitationChance = self.precipitationChance;
        copy.precipitationIntensity = self.precipitationIntensity;
        copy.precipitationType = [self.precipitationType copyWithZone:zone];
        copy.pressure = self.pressure;
        copy.pressureTrend = [self.pressureTrend copyWithZone:zone];
        copy.snowfallIntensity = self.snowfallIntensity;
        copy.temperature = self.temperature;
        copy.temperatureApparent = self.temperatureApparent;
        copy.temperatureDewPoint = self.temperatureDewPoint;
        copy.uvIndex = self.uvIndex;
        copy.visibility = self.visibility;
        copy.windDirection = self.windDirection;
        copy.windGust = self.windGust;
        copy.windSpeed = self.windSpeed;
    }
    return copy;
}

@end



@interface ForecastHourlyBeanForecastHourly ()

- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict;

@end



@implementation ForecastHourlyBeanForecastHourly

+ (instancetype)modelObjectWithDictionary:(NSDictionary *)dict{
    return [[self alloc] initWithDictionary:dict];
}

- (instancetype)initWithDictionary:(NSDictionary *)dict{
    self = [super init];
    if(self && [dict isKindOfClass:[NSDictionary class]]) {
        NSObject *hours = [self objectOrNilForKey:kForecastHourlyBeanForecastHourlyHours fromDictionary:dict];
        if ([hours isKindOfClass:[NSArray class]]) {
            NSArray *array = (NSArray *)hours;
            NSMutableArray *array0 = [NSMutableArray new];
            for (NSDictionary *dict in array) {
                ForecastHourlyBeanForecastHourlyHours *hours = [ForecastHourlyBeanForecastHourlyHours modelObjectWithDictionary:dict];
                [array0 addObject:hours];
            }
            self.hours = [NSArray arrayWithArray:array0];
        }
    }
    return self;
}

- (NSDictionary *)dictionaryRepresentation{
    NSMutableDictionary *mutableDict = [NSMutableDictionary dictionary];
    if (self.hours) {
        NSArray *array0 = self.hours;
        NSMutableArray *mArray0 = [NSMutableArray new];
        for (NSObject *obj in array0) {
            if([obj respondsToSelector:@selector(dictionaryRepresentation)]) {
                // This class is a model object
                [mArray0 addObject:[obj performSelector:@selector(dictionaryRepresentation)]];
            }
        }
        [mutableDict setValue:[NSArray arrayWithArray:mArray0] forKey:kForecastHourlyBeanForecastHourlyHours];
    }
    return [NSDictionary dictionaryWithDictionary:mutableDict];
}

- (NSString *)description{
    return [NSString stringWithFormat:@"%@", [self dictionaryRepresentation]];
}

#pragma mark - Helper Method

- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict{
    id object = [dict objectForKey:aKey];
    return [object isEqual:[NSNull null]] ? nil : object;
}


#pragma mark - NSCoding Methods

- (id)initWithCoder:(NSCoder *)aDecoder{
    self = [super init];
    self.hours = [aDecoder decodeObjectForKey:kForecastHourlyBeanForecastHourlyHours];
    return self;
}

- (void)encodeWithCoder:(NSCoder *)aCoder{
    [aCoder encodeObject:_hours forKey:kForecastHourlyBeanForecastHourlyHours];
}

- (id)copyWithZone:(NSZone *)zone{
    ForecastHourlyBeanForecastHourly *copy = [[ForecastHourlyBeanForecastHourly alloc] init];
    if (copy) {
        copy.hours = [self.hours copyWithZone:zone];
    }
    return copy;
}

@end



@interface ForecastHourlyBean ()

- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict;

@end



@implementation ForecastHourlyBean

+ (instancetype)modelObjectWithDictionary:(NSDictionary *)dict{
    return [[self alloc] initWithDictionary:dict];
}

- (instancetype)initWithDictionary:(NSDictionary *)dict{
    self = [super init];
    if(self && [dict isKindOfClass:[NSDictionary class]]) {
        self.forecastHourly = [ForecastHourlyBeanForecastHourly modelObjectWithDictionary:[dict objectForKey:kForecastHourlyBeanForecastHourly]];
    }
    return self;
}

- (NSDictionary *)dictionaryRepresentation{
    NSMutableDictionary *mutableDict = [NSMutableDictionary dictionary];
    [mutableDict setValue:[self.forecastHourly dictionaryRepresentation] forKey:kForecastHourlyBeanForecastHourly];
    return [NSDictionary dictionaryWithDictionary:mutableDict];
}

- (NSString *)description{
    return [NSString stringWithFormat:@"%@", [self dictionaryRepresentation]];
}

#pragma mark - Helper Method

- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict{
    id object = [dict objectForKey:aKey];
    return [object isEqual:[NSNull null]] ? nil : object;
}


#pragma mark - NSCoding Methods

- (id)initWithCoder:(NSCoder *)aDecoder{
    self = [super init];
    self.forecastHourly = [aDecoder decodeObjectForKey:kForecastHourlyBeanForecastHourly];
    return self;
}

- (void)encodeWithCoder:(NSCoder *)aCoder{
    [aCoder encodeObject:_forecastHourly forKey:kForecastHourlyBeanForecastHourly];
}

- (id)copyWithZone:(NSZone *)zone{
    ForecastHourlyBean *copy = [[ForecastHourlyBean alloc] init];
    if (copy) {
        copy.forecastHourly = [self.forecastHourly copyWithZone:zone];
    }
    return copy;
}

@end

