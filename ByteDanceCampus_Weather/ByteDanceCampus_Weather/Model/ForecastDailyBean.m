//
//  ForecastDailyModel.m
//
//  Created by cnatom on 2022/08/12.
//  Copyright © 2022年 ssr. All rights reserved.
//
//  Code generated by jsonToOCModel https://json.im/
//

#import "ForecastDailyBean.h"

NSString *const kForecastDailyModelForecastDaily = @"forecastDaily";
NSString *const kForecastDailyModelForecastDailyDays = @"days";
NSString *const kForecastDailyModelForecastDailyDaysConditionCode = @"conditionCode";
NSString *const kForecastDailyModelForecastDailyDaysDaytimeForecast = @"daytimeForecast";
NSString *const kForecastDailyModelForecastDailyDaysForecastEnd = @"forecastEnd";
NSString *const kForecastDailyModelForecastDailyDaysForecastStart = @"forecastStart";
NSString *const kForecastDailyModelForecastDailyDaysMaxUvIndex = @"maxUvIndex";
NSString *const kForecastDailyModelForecastDailyDaysMoonPhase = @"moonPhase";
NSString *const kForecastDailyModelForecastDailyDaysMoonrise = @"moonrise";
NSString *const kForecastDailyModelForecastDailyDaysMoonset = @"moonset";
NSString *const kForecastDailyModelForecastDailyDaysOvernightForecast = @"overnightForecast";
NSString *const kForecastDailyModelForecastDailyDaysPrecipitationAmount = @"precipitationAmount";
NSString *const kForecastDailyModelForecastDailyDaysPrecipitationChance = @"precipitationChance";
NSString *const kForecastDailyModelForecastDailyDaysPrecipitationType = @"precipitationType";
NSString *const kForecastDailyModelForecastDailyDaysRestOfDayForecast = @"restOfDayForecast";
NSString *const kForecastDailyModelForecastDailyDaysSnowfallAmount = @"snowfallAmount";
NSString *const kForecastDailyModelForecastDailyDaysSolarMidnight = @"solarMidnight";
NSString *const kForecastDailyModelForecastDailyDaysSolarNoon = @"solarNoon";
NSString *const kForecastDailyModelForecastDailyDaysSunrise = @"sunrise";
NSString *const kForecastDailyModelForecastDailyDaysSunriseAstronomical = @"sunriseAstronomical";
NSString *const kForecastDailyModelForecastDailyDaysSunriseCivil = @"sunriseCivil";
NSString *const kForecastDailyModelForecastDailyDaysSunriseNautical = @"sunriseNautical";
NSString *const kForecastDailyModelForecastDailyDaysSunset = @"sunset";
NSString *const kForecastDailyModelForecastDailyDaysSunsetAstronomical = @"sunsetAstronomical";
NSString *const kForecastDailyModelForecastDailyDaysSunsetCivil = @"sunsetCivil";
NSString *const kForecastDailyModelForecastDailyDaysSunsetNautical = @"sunsetNautical";
NSString *const kForecastDailyModelForecastDailyDaysTemperatureMax = @"temperatureMax";
NSString *const kForecastDailyModelForecastDailyDaysTemperatureMin = @"temperatureMin";
NSString *const kForecastDailyModelForecastDailyDaysRestOfDayForecastCloudCover = @"cloudCover";
NSString *const kForecastDailyModelForecastDailyDaysRestOfDayForecastConditionCode = @"conditionCode";
NSString *const kForecastDailyModelForecastDailyDaysRestOfDayForecastForecastEnd = @"forecastEnd";
NSString *const kForecastDailyModelForecastDailyDaysRestOfDayForecastForecastStart = @"forecastStart";
NSString *const kForecastDailyModelForecastDailyDaysRestOfDayForecastHumidity = @"humidity";
NSString *const kForecastDailyModelForecastDailyDaysRestOfDayForecastPrecipitationAmount = @"precipitationAmount";
NSString *const kForecastDailyModelForecastDailyDaysRestOfDayForecastPrecipitationChance = @"precipitationChance";
NSString *const kForecastDailyModelForecastDailyDaysRestOfDayForecastPrecipitationType = @"precipitationType";
NSString *const kForecastDailyModelForecastDailyDaysRestOfDayForecastSnowfallAmount = @"snowfallAmount";
NSString *const kForecastDailyModelForecastDailyDaysRestOfDayForecastWindDirection = @"windDirection";
NSString *const kForecastDailyModelForecastDailyDaysRestOfDayForecastWindSpeed = @"windSpeed";

@interface ForecastDailyModelForecastDailyDaysRestOfDayForecast ()

- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict;

@end



@implementation ForecastDailyModelForecastDailyDaysRestOfDayForecast

+ (instancetype)modelObjectWithDictionary:(NSDictionary *)dict{
    return [[self alloc] initWithDictionary:dict];
}

- (instancetype)initWithDictionary:(NSDictionary *)dict{
    self = [super init];
    if(self && [dict isKindOfClass:[NSDictionary class]]) {
        self.cloudCover = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastCloudCover fromDictionary:dict] doubleValue];
        self.conditionCode = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastConditionCode fromDictionary:dict];
        self.forecastEnd = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastForecastEnd fromDictionary:dict];
        self.forecastStart = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastForecastStart fromDictionary:dict];
        self.humidity = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastHumidity fromDictionary:dict] doubleValue];
        self.precipitationAmount = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastPrecipitationAmount fromDictionary:dict] doubleValue];
        self.precipitationChance = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastPrecipitationChance fromDictionary:dict] doubleValue];
        self.precipitationType = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastPrecipitationType fromDictionary:dict];
        self.snowfallAmount = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastSnowfallAmount fromDictionary:dict] doubleValue];
        self.windDirection = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastWindDirection fromDictionary:dict] doubleValue];
        self.windSpeed = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastWindSpeed fromDictionary:dict] doubleValue];
    }
    return self;
}

- (NSDictionary *)dictionaryRepresentation{
    NSMutableDictionary *mutableDict = [NSMutableDictionary dictionary];
    [mutableDict setValue:[NSNumber numberWithDouble:self.cloudCover] forKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastCloudCover];
    [mutableDict setValue:self.conditionCode forKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastConditionCode];
    [mutableDict setValue:self.forecastEnd forKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastForecastEnd];
    [mutableDict setValue:self.forecastStart forKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastForecastStart];
    [mutableDict setValue:[NSNumber numberWithDouble:self.humidity] forKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastHumidity];
    [mutableDict setValue:[NSNumber numberWithDouble:self.precipitationAmount] forKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastPrecipitationAmount];
    [mutableDict setValue:[NSNumber numberWithDouble:self.precipitationChance] forKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastPrecipitationChance];
    [mutableDict setValue:self.precipitationType forKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastPrecipitationType];
    [mutableDict setValue:[NSNumber numberWithDouble:self.snowfallAmount] forKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastSnowfallAmount];
    [mutableDict setValue:[NSNumber numberWithDouble:self.windDirection] forKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastWindDirection];
    [mutableDict setValue:[NSNumber numberWithDouble:self.windSpeed] forKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastWindSpeed];
    return [NSDictionary dictionaryWithDictionary:mutableDict];
}

- (NSString *)description{
    return [NSString stringWithFormat:@"%@", [self dictionaryRepresentation]];
}

#pragma mark - Helper Method

- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict{
    id object = [dict objectForKey:aKey];
    return [object isEqual:[NSNull null]] ? nil : object;
}


#pragma mark - NSCoding Methods

- (id)initWithCoder:(NSCoder *)aDecoder{
    self = [super init];
    self.cloudCover = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastCloudCover];
    self.conditionCode = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastConditionCode];
    self.forecastEnd = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastForecastEnd];
    self.forecastStart = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastForecastStart];
    self.humidity = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastHumidity];
    self.precipitationAmount = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastPrecipitationAmount];
    self.precipitationChance = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastPrecipitationChance];
    self.precipitationType = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastPrecipitationType];
    self.snowfallAmount = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastSnowfallAmount];
    self.windDirection = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastWindDirection];
    self.windSpeed = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastWindSpeed];
    return self;
}

- (void)encodeWithCoder:(NSCoder *)aCoder{
    [aCoder encodeDouble:_cloudCover forKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastCloudCover];
    [aCoder encodeObject:_conditionCode forKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastConditionCode];
    [aCoder encodeObject:_forecastEnd forKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastForecastEnd];
    [aCoder encodeObject:_forecastStart forKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastForecastStart];
    [aCoder encodeDouble:_humidity forKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastHumidity];
    [aCoder encodeDouble:_precipitationAmount forKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastPrecipitationAmount];
    [aCoder encodeDouble:_precipitationChance forKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastPrecipitationChance];
    [aCoder encodeObject:_precipitationType forKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastPrecipitationType];
    [aCoder encodeDouble:_snowfallAmount forKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastSnowfallAmount];
    [aCoder encodeDouble:_windDirection forKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastWindDirection];
    [aCoder encodeDouble:_windSpeed forKey:kForecastDailyModelForecastDailyDaysRestOfDayForecastWindSpeed];
}

- (id)copyWithZone:(NSZone *)zone{
    ForecastDailyModelForecastDailyDaysRestOfDayForecast *copy = [[ForecastDailyModelForecastDailyDaysRestOfDayForecast alloc] init];
    if (copy) {
        copy.cloudCover = self.cloudCover;
        copy.conditionCode = [self.conditionCode copyWithZone:zone];
        copy.forecastEnd = [self.forecastEnd copyWithZone:zone];
        copy.forecastStart = [self.forecastStart copyWithZone:zone];
        copy.humidity = self.humidity;
        copy.precipitationAmount = self.precipitationAmount;
        copy.precipitationChance = self.precipitationChance;
        copy.precipitationType = [self.precipitationType copyWithZone:zone];
        copy.snowfallAmount = self.snowfallAmount;
        copy.windDirection = self.windDirection;
        copy.windSpeed = self.windSpeed;
    }
    return copy;
}

@end


NSString *const kForecastDailyModelForecastDailyDaysOvernightForecastCloudCover = @"cloudCover";
NSString *const kForecastDailyModelForecastDailyDaysOvernightForecastConditionCode = @"conditionCode";
NSString *const kForecastDailyModelForecastDailyDaysOvernightForecastForecastEnd = @"forecastEnd";
NSString *const kForecastDailyModelForecastDailyDaysOvernightForecastForecastStart = @"forecastStart";
NSString *const kForecastDailyModelForecastDailyDaysOvernightForecastHumidity = @"humidity";
NSString *const kForecastDailyModelForecastDailyDaysOvernightForecastPrecipitationAmount = @"precipitationAmount";
NSString *const kForecastDailyModelForecastDailyDaysOvernightForecastPrecipitationChance = @"precipitationChance";
NSString *const kForecastDailyModelForecastDailyDaysOvernightForecastPrecipitationType = @"precipitationType";
NSString *const kForecastDailyModelForecastDailyDaysOvernightForecastSnowfallAmount = @"snowfallAmount";
NSString *const kForecastDailyModelForecastDailyDaysOvernightForecastWindDirection = @"windDirection";
NSString *const kForecastDailyModelForecastDailyDaysOvernightForecastWindSpeed = @"windSpeed";

@interface ForecastDailyModelForecastDailyDaysOvernightForecast ()

- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict;

@end



@implementation ForecastDailyModelForecastDailyDaysOvernightForecast

+ (instancetype)modelObjectWithDictionary:(NSDictionary *)dict{
    return [[self alloc] initWithDictionary:dict];
}

- (instancetype)initWithDictionary:(NSDictionary *)dict{
    self = [super init];
    if(self && [dict isKindOfClass:[NSDictionary class]]) {
        self.cloudCover = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysOvernightForecastCloudCover fromDictionary:dict] doubleValue];
        self.conditionCode = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysOvernightForecastConditionCode fromDictionary:dict];
        self.forecastEnd = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysOvernightForecastForecastEnd fromDictionary:dict];
        self.forecastStart = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysOvernightForecastForecastStart fromDictionary:dict];
        self.humidity = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysOvernightForecastHumidity fromDictionary:dict] doubleValue];
        self.precipitationAmount = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysOvernightForecastPrecipitationAmount fromDictionary:dict] doubleValue];
        self.precipitationChance = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysOvernightForecastPrecipitationChance fromDictionary:dict] doubleValue];
        self.precipitationType = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysOvernightForecastPrecipitationType fromDictionary:dict];
        self.snowfallAmount = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysOvernightForecastSnowfallAmount fromDictionary:dict] doubleValue];
        self.windDirection = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysOvernightForecastWindDirection fromDictionary:dict] doubleValue];
        self.windSpeed = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysOvernightForecastWindSpeed fromDictionary:dict] doubleValue];
    }
    return self;
}

- (NSDictionary *)dictionaryRepresentation{
    NSMutableDictionary *mutableDict = [NSMutableDictionary dictionary];
    [mutableDict setValue:[NSNumber numberWithDouble:self.cloudCover] forKey:kForecastDailyModelForecastDailyDaysOvernightForecastCloudCover];
    [mutableDict setValue:self.conditionCode forKey:kForecastDailyModelForecastDailyDaysOvernightForecastConditionCode];
    [mutableDict setValue:self.forecastEnd forKey:kForecastDailyModelForecastDailyDaysOvernightForecastForecastEnd];
    [mutableDict setValue:self.forecastStart forKey:kForecastDailyModelForecastDailyDaysOvernightForecastForecastStart];
    [mutableDict setValue:[NSNumber numberWithDouble:self.humidity] forKey:kForecastDailyModelForecastDailyDaysOvernightForecastHumidity];
    [mutableDict setValue:[NSNumber numberWithDouble:self.precipitationAmount] forKey:kForecastDailyModelForecastDailyDaysOvernightForecastPrecipitationAmount];
    [mutableDict setValue:[NSNumber numberWithDouble:self.precipitationChance] forKey:kForecastDailyModelForecastDailyDaysOvernightForecastPrecipitationChance];
    [mutableDict setValue:self.precipitationType forKey:kForecastDailyModelForecastDailyDaysOvernightForecastPrecipitationType];
    [mutableDict setValue:[NSNumber numberWithDouble:self.snowfallAmount] forKey:kForecastDailyModelForecastDailyDaysOvernightForecastSnowfallAmount];
    [mutableDict setValue:[NSNumber numberWithDouble:self.windDirection] forKey:kForecastDailyModelForecastDailyDaysOvernightForecastWindDirection];
    [mutableDict setValue:[NSNumber numberWithDouble:self.windSpeed] forKey:kForecastDailyModelForecastDailyDaysOvernightForecastWindSpeed];
    return [NSDictionary dictionaryWithDictionary:mutableDict];
}

- (NSString *)description{
    return [NSString stringWithFormat:@"%@", [self dictionaryRepresentation]];
}

#pragma mark - Helper Method

- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict{
    id object = [dict objectForKey:aKey];
    return [object isEqual:[NSNull null]] ? nil : object;
}


#pragma mark - NSCoding Methods

- (id)initWithCoder:(NSCoder *)aDecoder{
    self = [super init];
    self.cloudCover = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysOvernightForecastCloudCover];
    self.conditionCode = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysOvernightForecastConditionCode];
    self.forecastEnd = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysOvernightForecastForecastEnd];
    self.forecastStart = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysOvernightForecastForecastStart];
    self.humidity = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysOvernightForecastHumidity];
    self.precipitationAmount = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysOvernightForecastPrecipitationAmount];
    self.precipitationChance = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysOvernightForecastPrecipitationChance];
    self.precipitationType = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysOvernightForecastPrecipitationType];
    self.snowfallAmount = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysOvernightForecastSnowfallAmount];
    self.windDirection = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysOvernightForecastWindDirection];
    self.windSpeed = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysOvernightForecastWindSpeed];
    return self;
}

- (void)encodeWithCoder:(NSCoder *)aCoder{
    [aCoder encodeDouble:_cloudCover forKey:kForecastDailyModelForecastDailyDaysOvernightForecastCloudCover];
    [aCoder encodeObject:_conditionCode forKey:kForecastDailyModelForecastDailyDaysOvernightForecastConditionCode];
    [aCoder encodeObject:_forecastEnd forKey:kForecastDailyModelForecastDailyDaysOvernightForecastForecastEnd];
    [aCoder encodeObject:_forecastStart forKey:kForecastDailyModelForecastDailyDaysOvernightForecastForecastStart];
    [aCoder encodeDouble:_humidity forKey:kForecastDailyModelForecastDailyDaysOvernightForecastHumidity];
    [aCoder encodeDouble:_precipitationAmount forKey:kForecastDailyModelForecastDailyDaysOvernightForecastPrecipitationAmount];
    [aCoder encodeDouble:_precipitationChance forKey:kForecastDailyModelForecastDailyDaysOvernightForecastPrecipitationChance];
    [aCoder encodeObject:_precipitationType forKey:kForecastDailyModelForecastDailyDaysOvernightForecastPrecipitationType];
    [aCoder encodeDouble:_snowfallAmount forKey:kForecastDailyModelForecastDailyDaysOvernightForecastSnowfallAmount];
    [aCoder encodeDouble:_windDirection forKey:kForecastDailyModelForecastDailyDaysOvernightForecastWindDirection];
    [aCoder encodeDouble:_windSpeed forKey:kForecastDailyModelForecastDailyDaysOvernightForecastWindSpeed];
}

- (id)copyWithZone:(NSZone *)zone{
    ForecastDailyModelForecastDailyDaysOvernightForecast *copy = [[ForecastDailyModelForecastDailyDaysOvernightForecast alloc] init];
    if (copy) {
        copy.cloudCover = self.cloudCover;
        copy.conditionCode = [self.conditionCode copyWithZone:zone];
        copy.forecastEnd = [self.forecastEnd copyWithZone:zone];
        copy.forecastStart = [self.forecastStart copyWithZone:zone];
        copy.humidity = self.humidity;
        copy.precipitationAmount = self.precipitationAmount;
        copy.precipitationChance = self.precipitationChance;
        copy.precipitationType = [self.precipitationType copyWithZone:zone];
        copy.snowfallAmount = self.snowfallAmount;
        copy.windDirection = self.windDirection;
        copy.windSpeed = self.windSpeed;
    }
    return copy;
}

@end


NSString *const kForecastDailyModelForecastDailyDaysDaytimeForecastCloudCover = @"cloudCover";
NSString *const kForecastDailyModelForecastDailyDaysDaytimeForecastConditionCode = @"conditionCode";
NSString *const kForecastDailyModelForecastDailyDaysDaytimeForecastForecastEnd = @"forecastEnd";
NSString *const kForecastDailyModelForecastDailyDaysDaytimeForecastForecastStart = @"forecastStart";
NSString *const kForecastDailyModelForecastDailyDaysDaytimeForecastHumidity = @"humidity";
NSString *const kForecastDailyModelForecastDailyDaysDaytimeForecastPrecipitationAmount = @"precipitationAmount";
NSString *const kForecastDailyModelForecastDailyDaysDaytimeForecastPrecipitationChance = @"precipitationChance";
NSString *const kForecastDailyModelForecastDailyDaysDaytimeForecastPrecipitationType = @"precipitationType";
NSString *const kForecastDailyModelForecastDailyDaysDaytimeForecastSnowfallAmount = @"snowfallAmount";
NSString *const kForecastDailyModelForecastDailyDaysDaytimeForecastWindDirection = @"windDirection";
NSString *const kForecastDailyModelForecastDailyDaysDaytimeForecastWindSpeed = @"windSpeed";

@interface ForecastDailyModelForecastDailyDaysDaytimeForecast ()

- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict;

@end



@implementation ForecastDailyModelForecastDailyDaysDaytimeForecast

+ (instancetype)modelObjectWithDictionary:(NSDictionary *)dict{
    return [[self alloc] initWithDictionary:dict];
}

- (instancetype)initWithDictionary:(NSDictionary *)dict{
    self = [super init];
    if(self && [dict isKindOfClass:[NSDictionary class]]) {
        self.cloudCover = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysDaytimeForecastCloudCover fromDictionary:dict] doubleValue];
        self.conditionCode = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysDaytimeForecastConditionCode fromDictionary:dict];
        self.forecastEnd = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysDaytimeForecastForecastEnd fromDictionary:dict];
        self.forecastStart = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysDaytimeForecastForecastStart fromDictionary:dict];
        self.humidity = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysDaytimeForecastHumidity fromDictionary:dict] doubleValue];
        self.precipitationAmount = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysDaytimeForecastPrecipitationAmount fromDictionary:dict] doubleValue];
        self.precipitationChance = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysDaytimeForecastPrecipitationChance fromDictionary:dict] doubleValue];
        self.precipitationType = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysDaytimeForecastPrecipitationType fromDictionary:dict];
        self.snowfallAmount = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysDaytimeForecastSnowfallAmount fromDictionary:dict] doubleValue];
        self.windDirection = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysDaytimeForecastWindDirection fromDictionary:dict] doubleValue];
        self.windSpeed = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysDaytimeForecastWindSpeed fromDictionary:dict] doubleValue];
    }
    return self;
}

- (NSDictionary *)dictionaryRepresentation{
    NSMutableDictionary *mutableDict = [NSMutableDictionary dictionary];
    [mutableDict setValue:[NSNumber numberWithDouble:self.cloudCover] forKey:kForecastDailyModelForecastDailyDaysDaytimeForecastCloudCover];
    [mutableDict setValue:self.conditionCode forKey:kForecastDailyModelForecastDailyDaysDaytimeForecastConditionCode];
    [mutableDict setValue:self.forecastEnd forKey:kForecastDailyModelForecastDailyDaysDaytimeForecastForecastEnd];
    [mutableDict setValue:self.forecastStart forKey:kForecastDailyModelForecastDailyDaysDaytimeForecastForecastStart];
    [mutableDict setValue:[NSNumber numberWithDouble:self.humidity] forKey:kForecastDailyModelForecastDailyDaysDaytimeForecastHumidity];
    [mutableDict setValue:[NSNumber numberWithDouble:self.precipitationAmount] forKey:kForecastDailyModelForecastDailyDaysDaytimeForecastPrecipitationAmount];
    [mutableDict setValue:[NSNumber numberWithDouble:self.precipitationChance] forKey:kForecastDailyModelForecastDailyDaysDaytimeForecastPrecipitationChance];
    [mutableDict setValue:self.precipitationType forKey:kForecastDailyModelForecastDailyDaysDaytimeForecastPrecipitationType];
    [mutableDict setValue:[NSNumber numberWithDouble:self.snowfallAmount] forKey:kForecastDailyModelForecastDailyDaysDaytimeForecastSnowfallAmount];
    [mutableDict setValue:[NSNumber numberWithDouble:self.windDirection] forKey:kForecastDailyModelForecastDailyDaysDaytimeForecastWindDirection];
    [mutableDict setValue:[NSNumber numberWithDouble:self.windSpeed] forKey:kForecastDailyModelForecastDailyDaysDaytimeForecastWindSpeed];
    return [NSDictionary dictionaryWithDictionary:mutableDict];
}

- (NSString *)description{
    return [NSString stringWithFormat:@"%@", [self dictionaryRepresentation]];
}

#pragma mark - Helper Method

- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict{
    id object = [dict objectForKey:aKey];
    return [object isEqual:[NSNull null]] ? nil : object;
}


#pragma mark - NSCoding Methods

- (id)initWithCoder:(NSCoder *)aDecoder{
    self = [super init];
    self.cloudCover = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysDaytimeForecastCloudCover];
    self.conditionCode = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysDaytimeForecastConditionCode];
    self.forecastEnd = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysDaytimeForecastForecastEnd];
    self.forecastStart = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysDaytimeForecastForecastStart];
    self.humidity = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysDaytimeForecastHumidity];
    self.precipitationAmount = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysDaytimeForecastPrecipitationAmount];
    self.precipitationChance = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysDaytimeForecastPrecipitationChance];
    self.precipitationType = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysDaytimeForecastPrecipitationType];
    self.snowfallAmount = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysDaytimeForecastSnowfallAmount];
    self.windDirection = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysDaytimeForecastWindDirection];
    self.windSpeed = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysDaytimeForecastWindSpeed];
    return self;
}

- (void)encodeWithCoder:(NSCoder *)aCoder{
    [aCoder encodeDouble:_cloudCover forKey:kForecastDailyModelForecastDailyDaysDaytimeForecastCloudCover];
    [aCoder encodeObject:_conditionCode forKey:kForecastDailyModelForecastDailyDaysDaytimeForecastConditionCode];
    [aCoder encodeObject:_forecastEnd forKey:kForecastDailyModelForecastDailyDaysDaytimeForecastForecastEnd];
    [aCoder encodeObject:_forecastStart forKey:kForecastDailyModelForecastDailyDaysDaytimeForecastForecastStart];
    [aCoder encodeDouble:_humidity forKey:kForecastDailyModelForecastDailyDaysDaytimeForecastHumidity];
    [aCoder encodeDouble:_precipitationAmount forKey:kForecastDailyModelForecastDailyDaysDaytimeForecastPrecipitationAmount];
    [aCoder encodeDouble:_precipitationChance forKey:kForecastDailyModelForecastDailyDaysDaytimeForecastPrecipitationChance];
    [aCoder encodeObject:_precipitationType forKey:kForecastDailyModelForecastDailyDaysDaytimeForecastPrecipitationType];
    [aCoder encodeDouble:_snowfallAmount forKey:kForecastDailyModelForecastDailyDaysDaytimeForecastSnowfallAmount];
    [aCoder encodeDouble:_windDirection forKey:kForecastDailyModelForecastDailyDaysDaytimeForecastWindDirection];
    [aCoder encodeDouble:_windSpeed forKey:kForecastDailyModelForecastDailyDaysDaytimeForecastWindSpeed];
}

- (id)copyWithZone:(NSZone *)zone{
    ForecastDailyModelForecastDailyDaysDaytimeForecast *copy = [[ForecastDailyModelForecastDailyDaysDaytimeForecast alloc] init];
    if (copy) {
        copy.cloudCover = self.cloudCover;
        copy.conditionCode = [self.conditionCode copyWithZone:zone];
        copy.forecastEnd = [self.forecastEnd copyWithZone:zone];
        copy.forecastStart = [self.forecastStart copyWithZone:zone];
        copy.humidity = self.humidity;
        copy.precipitationAmount = self.precipitationAmount;
        copy.precipitationChance = self.precipitationChance;
        copy.precipitationType = [self.precipitationType copyWithZone:zone];
        copy.snowfallAmount = self.snowfallAmount;
        copy.windDirection = self.windDirection;
        copy.windSpeed = self.windSpeed;
    }
    return copy;
}

@end



@interface ForecastDailyModelForecastDailyDays ()

- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict;

@end



@implementation ForecastDailyModelForecastDailyDays

+ (instancetype)modelObjectWithDictionary:(NSDictionary *)dict{
    return [[self alloc] initWithDictionary:dict];
}

- (instancetype)initWithDictionary:(NSDictionary *)dict{
    self = [super init];
    if(self && [dict isKindOfClass:[NSDictionary class]]) {
        self.conditionCode = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysConditionCode fromDictionary:dict];
        self.daytimeForecast = [ForecastDailyModelForecastDailyDaysDaytimeForecast modelObjectWithDictionary:[dict objectForKey:kForecastDailyModelForecastDailyDaysDaytimeForecast]];
        self.forecastEnd = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysForecastEnd fromDictionary:dict];
        self.forecastStart = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysForecastStart fromDictionary:dict];
        self.maxUvIndex = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysMaxUvIndex fromDictionary:dict] doubleValue];
        self.moonPhase = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysMoonPhase fromDictionary:dict];
        self.moonrise = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysMoonrise fromDictionary:dict];
        self.moonset = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysMoonset fromDictionary:dict];
        self.overnightForecast = [ForecastDailyModelForecastDailyDaysOvernightForecast modelObjectWithDictionary:[dict objectForKey:kForecastDailyModelForecastDailyDaysOvernightForecast]];
        self.precipitationAmount = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysPrecipitationAmount fromDictionary:dict] doubleValue];
        self.precipitationChance = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysPrecipitationChance fromDictionary:dict] doubleValue];
        self.precipitationType = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysPrecipitationType fromDictionary:dict];
        self.restOfDayForecast = [ForecastDailyModelForecastDailyDaysRestOfDayForecast modelObjectWithDictionary:[dict objectForKey:kForecastDailyModelForecastDailyDaysRestOfDayForecast]];
        self.snowfallAmount = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysSnowfallAmount fromDictionary:dict] doubleValue];
        self.solarMidnight = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysSolarMidnight fromDictionary:dict];
        self.solarNoon = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysSolarNoon fromDictionary:dict];
        self.sunrise = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysSunrise fromDictionary:dict];
        self.sunriseAstronomical = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysSunriseAstronomical fromDictionary:dict];
        self.sunriseCivil = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysSunriseCivil fromDictionary:dict];
        self.sunriseNautical = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysSunriseNautical fromDictionary:dict];
        self.sunset = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysSunset fromDictionary:dict];
        self.sunsetAstronomical = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysSunsetAstronomical fromDictionary:dict];
        self.sunsetCivil = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysSunsetCivil fromDictionary:dict];
        self.sunsetNautical = [self objectOrNilForKey:kForecastDailyModelForecastDailyDaysSunsetNautical fromDictionary:dict];
        self.temperatureMax = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysTemperatureMax fromDictionary:dict] doubleValue];
        self.temperatureMin = [[self objectOrNilForKey:kForecastDailyModelForecastDailyDaysTemperatureMin fromDictionary:dict] doubleValue];
    }
    return self;
}

- (NSDictionary *)dictionaryRepresentation{
    NSMutableDictionary *mutableDict = [NSMutableDictionary dictionary];
    [mutableDict setValue:self.conditionCode forKey:kForecastDailyModelForecastDailyDaysConditionCode];
    [mutableDict setValue:[self.daytimeForecast dictionaryRepresentation] forKey:kForecastDailyModelForecastDailyDaysDaytimeForecast];
    [mutableDict setValue:self.forecastEnd forKey:kForecastDailyModelForecastDailyDaysForecastEnd];
    [mutableDict setValue:self.forecastStart forKey:kForecastDailyModelForecastDailyDaysForecastStart];
    [mutableDict setValue:[NSNumber numberWithDouble:self.maxUvIndex] forKey:kForecastDailyModelForecastDailyDaysMaxUvIndex];
    [mutableDict setValue:self.moonPhase forKey:kForecastDailyModelForecastDailyDaysMoonPhase];
    [mutableDict setValue:self.moonrise forKey:kForecastDailyModelForecastDailyDaysMoonrise];
    [mutableDict setValue:self.moonset forKey:kForecastDailyModelForecastDailyDaysMoonset];
    [mutableDict setValue:[self.overnightForecast dictionaryRepresentation] forKey:kForecastDailyModelForecastDailyDaysOvernightForecast];
    [mutableDict setValue:[NSNumber numberWithDouble:self.precipitationAmount] forKey:kForecastDailyModelForecastDailyDaysPrecipitationAmount];
    [mutableDict setValue:[NSNumber numberWithDouble:self.precipitationChance] forKey:kForecastDailyModelForecastDailyDaysPrecipitationChance];
    [mutableDict setValue:self.precipitationType forKey:kForecastDailyModelForecastDailyDaysPrecipitationType];
    [mutableDict setValue:[self.restOfDayForecast dictionaryRepresentation] forKey:kForecastDailyModelForecastDailyDaysRestOfDayForecast];
    [mutableDict setValue:[NSNumber numberWithDouble:self.snowfallAmount] forKey:kForecastDailyModelForecastDailyDaysSnowfallAmount];
    [mutableDict setValue:self.solarMidnight forKey:kForecastDailyModelForecastDailyDaysSolarMidnight];
    [mutableDict setValue:self.solarNoon forKey:kForecastDailyModelForecastDailyDaysSolarNoon];
    [mutableDict setValue:self.sunrise forKey:kForecastDailyModelForecastDailyDaysSunrise];
    [mutableDict setValue:self.sunriseAstronomical forKey:kForecastDailyModelForecastDailyDaysSunriseAstronomical];
    [mutableDict setValue:self.sunriseCivil forKey:kForecastDailyModelForecastDailyDaysSunriseCivil];
    [mutableDict setValue:self.sunriseNautical forKey:kForecastDailyModelForecastDailyDaysSunriseNautical];
    [mutableDict setValue:self.sunset forKey:kForecastDailyModelForecastDailyDaysSunset];
    [mutableDict setValue:self.sunsetAstronomical forKey:kForecastDailyModelForecastDailyDaysSunsetAstronomical];
    [mutableDict setValue:self.sunsetCivil forKey:kForecastDailyModelForecastDailyDaysSunsetCivil];
    [mutableDict setValue:self.sunsetNautical forKey:kForecastDailyModelForecastDailyDaysSunsetNautical];
    [mutableDict setValue:[NSNumber numberWithDouble:self.temperatureMax] forKey:kForecastDailyModelForecastDailyDaysTemperatureMax];
    [mutableDict setValue:[NSNumber numberWithDouble:self.temperatureMin] forKey:kForecastDailyModelForecastDailyDaysTemperatureMin];
    return [NSDictionary dictionaryWithDictionary:mutableDict];
}

- (NSString *)description{
    return [NSString stringWithFormat:@"%@", [self dictionaryRepresentation]];
}

#pragma mark - Helper Method

- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict{
    id object = [dict objectForKey:aKey];
    return [object isEqual:[NSNull null]] ? nil : object;
}


#pragma mark - NSCoding Methods

- (id)initWithCoder:(NSCoder *)aDecoder{
    self = [super init];
    self.conditionCode = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysConditionCode];
    self.daytimeForecast = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysDaytimeForecast];
    self.forecastEnd = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysForecastEnd];
    self.forecastStart = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysForecastStart];
    self.maxUvIndex = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysMaxUvIndex];
    self.moonPhase = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysMoonPhase];
    self.moonrise = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysMoonrise];
    self.moonset = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysMoonset];
    self.overnightForecast = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysOvernightForecast];
    self.precipitationAmount = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysPrecipitationAmount];
    self.precipitationChance = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysPrecipitationChance];
    self.precipitationType = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysPrecipitationType];
    self.restOfDayForecast = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysRestOfDayForecast];
    self.snowfallAmount = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysSnowfallAmount];
    self.solarMidnight = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysSolarMidnight];
    self.solarNoon = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysSolarNoon];
    self.sunrise = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysSunrise];
    self.sunriseAstronomical = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysSunriseAstronomical];
    self.sunriseCivil = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysSunriseCivil];
    self.sunriseNautical = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysSunriseNautical];
    self.sunset = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysSunset];
    self.sunsetAstronomical = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysSunsetAstronomical];
    self.sunsetCivil = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysSunsetCivil];
    self.sunsetNautical = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDaysSunsetNautical];
    self.temperatureMax = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysTemperatureMax];
    self.temperatureMin = [aDecoder decodeDoubleForKey:kForecastDailyModelForecastDailyDaysTemperatureMin];
    return self;
}

- (void)encodeWithCoder:(NSCoder *)aCoder{
    [aCoder encodeObject:_conditionCode forKey:kForecastDailyModelForecastDailyDaysConditionCode];
    [aCoder encodeObject:_daytimeForecast forKey:kForecastDailyModelForecastDailyDaysDaytimeForecast];
    [aCoder encodeObject:_forecastEnd forKey:kForecastDailyModelForecastDailyDaysForecastEnd];
    [aCoder encodeObject:_forecastStart forKey:kForecastDailyModelForecastDailyDaysForecastStart];
    [aCoder encodeDouble:_maxUvIndex forKey:kForecastDailyModelForecastDailyDaysMaxUvIndex];
    [aCoder encodeObject:_moonPhase forKey:kForecastDailyModelForecastDailyDaysMoonPhase];
    [aCoder encodeObject:_moonrise forKey:kForecastDailyModelForecastDailyDaysMoonrise];
    [aCoder encodeObject:_moonset forKey:kForecastDailyModelForecastDailyDaysMoonset];
    [aCoder encodeObject:_overnightForecast forKey:kForecastDailyModelForecastDailyDaysOvernightForecast];
    [aCoder encodeDouble:_precipitationAmount forKey:kForecastDailyModelForecastDailyDaysPrecipitationAmount];
    [aCoder encodeDouble:_precipitationChance forKey:kForecastDailyModelForecastDailyDaysPrecipitationChance];
    [aCoder encodeObject:_precipitationType forKey:kForecastDailyModelForecastDailyDaysPrecipitationType];
    [aCoder encodeObject:_restOfDayForecast forKey:kForecastDailyModelForecastDailyDaysRestOfDayForecast];
    [aCoder encodeDouble:_snowfallAmount forKey:kForecastDailyModelForecastDailyDaysSnowfallAmount];
    [aCoder encodeObject:_solarMidnight forKey:kForecastDailyModelForecastDailyDaysSolarMidnight];
    [aCoder encodeObject:_solarNoon forKey:kForecastDailyModelForecastDailyDaysSolarNoon];
    [aCoder encodeObject:_sunrise forKey:kForecastDailyModelForecastDailyDaysSunrise];
    [aCoder encodeObject:_sunriseAstronomical forKey:kForecastDailyModelForecastDailyDaysSunriseAstronomical];
    [aCoder encodeObject:_sunriseCivil forKey:kForecastDailyModelForecastDailyDaysSunriseCivil];
    [aCoder encodeObject:_sunriseNautical forKey:kForecastDailyModelForecastDailyDaysSunriseNautical];
    [aCoder encodeObject:_sunset forKey:kForecastDailyModelForecastDailyDaysSunset];
    [aCoder encodeObject:_sunsetAstronomical forKey:kForecastDailyModelForecastDailyDaysSunsetAstronomical];
    [aCoder encodeObject:_sunsetCivil forKey:kForecastDailyModelForecastDailyDaysSunsetCivil];
    [aCoder encodeObject:_sunsetNautical forKey:kForecastDailyModelForecastDailyDaysSunsetNautical];
    [aCoder encodeDouble:_temperatureMax forKey:kForecastDailyModelForecastDailyDaysTemperatureMax];
    [aCoder encodeDouble:_temperatureMin forKey:kForecastDailyModelForecastDailyDaysTemperatureMin];
}

- (id)copyWithZone:(NSZone *)zone{
    ForecastDailyModelForecastDailyDays *copy = [[ForecastDailyModelForecastDailyDays alloc] init];
    if (copy) {
        copy.conditionCode = [self.conditionCode copyWithZone:zone];
        copy.daytimeForecast = [self.daytimeForecast copyWithZone:zone];
        copy.forecastEnd = [self.forecastEnd copyWithZone:zone];
        copy.forecastStart = [self.forecastStart copyWithZone:zone];
        copy.maxUvIndex = self.maxUvIndex;
        copy.moonPhase = [self.moonPhase copyWithZone:zone];
        copy.moonrise = [self.moonrise copyWithZone:zone];
        copy.moonset = [self.moonset copyWithZone:zone];
        copy.overnightForecast = [self.overnightForecast copyWithZone:zone];
        copy.precipitationAmount = self.precipitationAmount;
        copy.precipitationChance = self.precipitationChance;
        copy.precipitationType = [self.precipitationType copyWithZone:zone];
        copy.restOfDayForecast = [self.restOfDayForecast copyWithZone:zone];
        copy.snowfallAmount = self.snowfallAmount;
        copy.solarMidnight = [self.solarMidnight copyWithZone:zone];
        copy.solarNoon = [self.solarNoon copyWithZone:zone];
        copy.sunrise = [self.sunrise copyWithZone:zone];
        copy.sunriseAstronomical = [self.sunriseAstronomical copyWithZone:zone];
        copy.sunriseCivil = [self.sunriseCivil copyWithZone:zone];
        copy.sunriseNautical = [self.sunriseNautical copyWithZone:zone];
        copy.sunset = [self.sunset copyWithZone:zone];
        copy.sunsetAstronomical = [self.sunsetAstronomical copyWithZone:zone];
        copy.sunsetCivil = [self.sunsetCivil copyWithZone:zone];
        copy.sunsetNautical = [self.sunsetNautical copyWithZone:zone];
        copy.temperatureMax = self.temperatureMax;
        copy.temperatureMin = self.temperatureMin;
    }
    return copy;
}

@end



@interface ForecastDailyModelForecastDaily ()

- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict;

@end



@implementation ForecastDailyModelForecastDaily

+ (instancetype)modelObjectWithDictionary:(NSDictionary *)dict{
    return [[self alloc] initWithDictionary:dict];
}

- (instancetype)initWithDictionary:(NSDictionary *)dict{
    self = [super init];
    if(self && [dict isKindOfClass:[NSDictionary class]]) {
        NSObject *days = [self objectOrNilForKey:kForecastDailyModelForecastDailyDays fromDictionary:dict];
        if ([days isKindOfClass:[NSArray class]]) {
            NSArray *array = (NSArray *)days;
            NSMutableArray *array0 = [NSMutableArray new];
            for (NSDictionary *dict in array) {
                ForecastDailyModelForecastDailyDays *days = [ForecastDailyModelForecastDailyDays modelObjectWithDictionary:dict];
                [array0 addObject:days];
            }
            self.days = [NSArray arrayWithArray:array0];
        }
    }
    return self;
}

- (NSDictionary *)dictionaryRepresentation{
    NSMutableDictionary *mutableDict = [NSMutableDictionary dictionary];
    if (self.days) {
        NSArray *array0 = self.days;
        NSMutableArray *mArray0 = [NSMutableArray new];
        for (NSObject *obj in array0) {
            if([obj respondsToSelector:@selector(dictionaryRepresentation)]) {
                // This class is a model object
                [mArray0 addObject:[obj performSelector:@selector(dictionaryRepresentation)]];
            }
        }
        [mutableDict setValue:[NSArray arrayWithArray:mArray0] forKey:kForecastDailyModelForecastDailyDays];
    }
    return [NSDictionary dictionaryWithDictionary:mutableDict];
}

- (NSString *)description{
    return [NSString stringWithFormat:@"%@", [self dictionaryRepresentation]];
}

#pragma mark - Helper Method

- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict{
    id object = [dict objectForKey:aKey];
    return [object isEqual:[NSNull null]] ? nil : object;
}


#pragma mark - NSCoding Methods

- (id)initWithCoder:(NSCoder *)aDecoder{
    self = [super init];
    self.days = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDailyDays];
    return self;
}

- (void)encodeWithCoder:(NSCoder *)aCoder{
    [aCoder encodeObject:_days forKey:kForecastDailyModelForecastDailyDays];
}

- (id)copyWithZone:(NSZone *)zone{
    ForecastDailyModelForecastDaily *copy = [[ForecastDailyModelForecastDaily alloc] init];
    if (copy) {
        copy.days = [self.days copyWithZone:zone];
    }
    return copy;
}

@end



@interface ForecastDailyBean ()

- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict;

@end



@implementation ForecastDailyBean

+ (instancetype)modelObjectWithDictionary:(NSDictionary *)dict{
    return [[self alloc] initWithDictionary:dict];
}

- (instancetype)initWithDictionary:(NSDictionary *)dict{
    self = [super init];
    if(self && [dict isKindOfClass:[NSDictionary class]]) {
        self.forecastDaily = [ForecastDailyModelForecastDaily modelObjectWithDictionary:[dict objectForKey:kForecastDailyModelForecastDaily]];
    }
    return self;
}

- (NSDictionary *)dictionaryRepresentation{
    NSMutableDictionary *mutableDict = [NSMutableDictionary dictionary];
    [mutableDict setValue:[self.forecastDaily dictionaryRepresentation] forKey:kForecastDailyModelForecastDaily];
    return [NSDictionary dictionaryWithDictionary:mutableDict];
}

- (NSString *)description{
    return [NSString stringWithFormat:@"%@", [self dictionaryRepresentation]];
}

#pragma mark - Helper Method

- (id)objectOrNilForKey:(id)aKey fromDictionary:(NSDictionary *)dict{
    id object = [dict objectForKey:aKey];
    return [object isEqual:[NSNull null]] ? nil : object;
}


#pragma mark - NSCoding Methods

- (id)initWithCoder:(NSCoder *)aDecoder{
    self = [super init];
    self.forecastDaily = [aDecoder decodeObjectForKey:kForecastDailyModelForecastDaily];
    return self;
}

- (void)encodeWithCoder:(NSCoder *)aCoder{
    [aCoder encodeObject:_forecastDaily forKey:kForecastDailyModelForecastDaily];
}

- (id)copyWithZone:(NSZone *)zone{
    ForecastDailyBean *copy = [[ForecastDailyBean alloc] init];
    if (copy) {
        copy.forecastDaily = [self.forecastDaily copyWithZone:zone];
    }
    return copy;
}

@end

